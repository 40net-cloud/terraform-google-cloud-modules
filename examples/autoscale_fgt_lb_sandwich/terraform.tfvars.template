# Project variables
project = "<YOUR-OWN-VALUE>"        # Your GCP project name.
prefix  = "lb-sandwich"             # Prefix of the objects in this example. It should be unique to avoid name conflict between examples.
region  = "<YOUR-OWN-VALUE>"        # e.g., "us-central1"
zone    = "<YOUR-OWN-VALUE>"        # e.g., "us-central1-a"

# FGT variables
fgt_password = "<YOUR-OWN-VALUE>"   # Your own value, or this terraform project will create one for you. (Username is admin)
machine_type = "n1-standard-4"      # The Virtual Machine type to deploy FGT.
image_type   = "fortigate-74-byol"  # FGT Image type.
                                    # fortigate-74-byol: bring your own licenses, you need to specify cloud_function->license_source;
                                    # fortigate-74-payg: pay as you go, you don't need to specify license_source.
fgt_has_public_ip = false           # If set to true, port1 of all FGTs will have a public IP.
# Additional disk (Optional)
# additional_disk = {
#   size = 50                       # Log disk size (GB) for each FGT. If set to 0, no additional log disk is created.
#   type = "pd-standard"            # The Google Compute Engine disk type. Such as "pd-ssd", "local-ssd", "pd-balanced" or "pd-standard".
# }

# Network
external_subnet = "192.168.0.0/22"  # The CIDR of the external VPC for this project. This IP range is used only for FGTs.
internal_subnet = "192.168.4.0/22"  # The CIDR of the internal VPC for this project. This IP range is used only for FGTs and internal load balancer.
# protected_vpc = [                 # List of your existing VPCs (The LANs your want to protect). If specified, outbound and inbound traffic from these VPCs will first go through the FGTs.
#   {name = "<YOUR-VPC-NAME-1>"},
#   {name = "<YOUR-VPC-NAME-2>"}
# ]

# Load Balancer (Parameters for external and internal load balancers.)
load_balancer = {
  health_check_port = 8008              # The port to be used for health check.
  internal_lb = {
    front_end_ip      = "192.168.4.100" # Front end IP of the internal load balancer. It should be in the "internal_subnet" IP range. Set by the API if undefined.
    frontend_protocol = "TCP"           # Protocol of the front-end forwarding rule. Valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT.
    backend_protocol  = "TCP"           # The protocol the load balancer uses to communicate with the backend. Valid options are HTTP, HTTPS, HTTP2, SSL, TCP, UDP, GRPC, UNSPECIFIED.
  }
  external_lb = {
    frontend_protocol = "TCP"           # Protocol of the front-end forwarding rule. Valid options are TCP, UDP, ESP, AH, SCTP, ICMP and L3_DEFAULT.
    backend_protocol  = "TCP"           # The protocol the load balancer uses to communicate with the backend. Valid options are HTTP, HTTPS, HTTP2, SSL, TCP, UDP, GRPC, UNSPECIFIED.
  }
}

# Cloud function (Manage FGT synchronization and inject license into FGT.)
cloud_function = {
  function_ip_range   = "192.168.8.0/28"   # Cloud function needs to have its own CIDR ip range ending with "/28", which cannot be used by other resources.
  license_source      = "file"             # The source of license if your image_type is "fortigate-xx-byol".
                                           # Possible value: "none", "fortiflex", "file", "file_fortiflex"
  license_file_folder = "./licenses"       # The folder where all ".lic" license files are located.
  autoscale_psksecret = "<RANDOM-STRING>"  # The secret key used to synchronize information between FortiGates. If not set, the module will randomly generate a 16-character secret key.
  print_debug_msg     = fasle              # If set as true, the cloud function will print debug messages. You can find these messages in Google Cloud Logs Explorer.
  # Specify fortiflex parameters if license_source is "fortiflex" or "file_fortiflex"
  # fortiflex = {
  #   retrieve_mode = "use_active"           # How to retrieve an existing fortiflex license (entitlement)
  #                                          # "use_stopped" selects and reactivates a stopped entitlement where the description field is empty;
  #                                          # "use_active" selects one active and unused entitlement where the description field is empty.
  #   username      = "<YOUR-OWN-VALUE>"     # The username of your FortiFlex account.
  #   password      = "<YOUR-OWN-VALUE>"     # The password of your FortiFlex account.
  #   config        = <YOUR-OWN-VALUE>       # The config ID of your FortiFlex configuration.
  # }

  # This parameter controls the instance that runs the cloud function.
  service_config = {
    max_instance_count               = 1    # The limit on the maximum number of function instances that may coexist at a given time.
    max_instance_request_concurrency = 2    # Sets the maximum number of concurrent requests that each instance can receive.
    available_cpu                    = "1"  # The number of CPUs used in a single container instance.
    available_memory                 = "1G" # The amount of memory available for a function.
    timeout_seconds                  = 420  # The function execution timeout.
  }
}

# Autoscaler (When to autoscale and the maximum number of FortiGate instances.)
autoscaler = {
  max_instances   = 4     # The maximum number of FGT instances
  min_instances   = 2     # The minimum number of FGT instances
  cooldown_period = 360   # Specify how long (seconds) it takes for FGT to initialize from boot time until it is ready to serve.
  cpu_utilization = 0.8   # Autoscaling signal. If CPU utilization is above this value, Google Cloud will create new FGT instances.
}

# Additional FGT configuration script. Modify config_script based on your needs.
# NOTE: After deploying this terraform project, changing the variable config_script (and contents in config_file) will not change the FortiGate configuration.
# The following script is just an example: it allows all inbound and outbound traffic,
# and it also allows traffic between your VPCs (protected LANs).
config_script = <<EOF
config firewall policy
    # Allow all internal to external traffic
    edit 0
        set name "internal_to_external"
        set srcintf "port2"
        set dstintf "port1"
        set action accept
        set srcaddr "all"
        set dstaddr "all"
        set schedule "always"
        set service "ALL"
        set nat enable
    next
    # Allow all external to internal traffic
    edit 0
        set name "external_to_internal"
        set srcintf "port1"
        set dstintf "port2"
        set action accept
        set srcaddr "all"
        set dstaddr "all"
        set schedule "always"
        set service "ALL"
    next
    # Allow all internal to internal traffic (traffic between protected LANs)
    edit 0
        set name "internal_to_internal"
        set srcintf "port2"
        set dstintf "port2"
        set action accept
        set srcaddr "all"
        set dstaddr "all"
        set schedule "always"
        set service "ALL"
    next
end
# Allow FGTs to route external traffic to protected LAN.
config router static
    edit 0
        # Assume all your VPCs (protected LANs) are in 10.0.0.0/8
        # Assume all protected LANs connect to port2
        # Assume internal subnet gateway is 192.168.4.1 (internal_subnet is 192.168.4.0/22)
        set dst 10.0.0.0/8
        set gateway 192.168.4.1
        set device "port2"
    next
end
EOF

# In addition to the variable config_script, you can also save the configuration script as a file and upload the script using the variable config_file.
# If you specify both config_script and config_file, this terraform project will upload both of them.
# config_file = "<YOUR-OWN-VALUE>"  # e.g., your_config_file.conf
